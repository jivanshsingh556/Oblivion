import openai
import gtts
import speech_recognition as sr
from playsound import playsound
import pyaudio
import pygame
import uuid
import io
import os
from tempfile import NamedTemporaryFile
import subprocess

# Replace with your OpenAI API key
openai.api_key = "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"

def generate_response(prompt):
    # Check for specific commands

    if "song" in prompt.lower():
        words_to_strip = ["play", "oblivian", "on", "youtube","user:","oblivi",":","song","the"]
        search_query = prompt.lower()
        for word in words_to_strip:
            search_query = search_query.replace(word, "").strip()

        search_url = f"https://www.youtube.com/results?search_query={search_query}"
        chrome_path = r"C:\Program Files\Google\Chrome\Application\chrome.exe"  # Replace with the actual path to your Google Chrome executable
        subprocess.run([chrome_path, search_url])

        return f"Playing '{search_query}' on YouTube..."

    if "master" in prompt.lower():
        words_to_strip = ["play", "oblivian", "on", "youtube", "user:", "oblivi", ":", "song", "the"]
        search_query = prompt.lower()
        for word in words_to_strip:
            search_query = search_query.replace(word, "").strip()

        search_url = f"https://www.youtube.com/watch?v=E0ozmU9cJDg"
        chrome_path = r"C:\Program Files\Google\Chrome\Application\chrome.exe"  # Replace with the actual path to your Google Chrome executable
        subprocess.run([chrome_path, search_url])

        return f"Playing Master of puppets on YouTube..."



    if "open youtube" in prompt.lower():
        youtube_path = r"C:\Users\atman\OneDrive\Documents\UwU.bat" # Replace with the actual path of youtube
        subprocess.run([youtube_path])

        return "Opening Youtube..."
    if "open google chrome" in prompt.lower():
        chrome_path = r"C:\Program Files\Google\Chrome\Application\chrome.exe"  # Replace with the actual path to your Google Chrome executable
        subprocess.run([chrome_path])

        return "Opening Youtube..."

    if "search" in prompt.lower():
        words_to_strip = ["search", "oblivian", "for", "on", "google", "chrome", "user:" , "oblivi", ":" ]
        search_query = prompt.lower()
        for word in words_to_strip:
            search_query = search_query.replace(word, "").strip()

        search_url = f"https://www.google.com/search?q={search_query}"
        chrome_path = r"C:\Program Files\Google\Chrome\Application\chrome.exe"  # Replace with the actual path to your Google Chrome executable
        subprocess.run([chrome_path, search_url])

        return f"Searching for '{search_query}' on Google Chrome..."

    if "jiva" in prompt.lower():
        words_to_strip = ["search", "oblivian", "for", "on", "google", "chrome", "user:" , "oblivi", ":" ]
        search_query = prompt.lower()
        for word in words_to_strip:
            search_query = search_query.replace(word, "").strip()

        search_url = f"https://www.jiva.com/"
        chrome_path = r"C:\Program Files\Google\Chrome\Application\chrome.exe"  # Replace with the actual path to your Google Chrome executable
        subprocess.run([chrome_path, search_url])

        return f"Opening the official website of Jiva on Google Chrome..."

    if "404" in prompt.lower():
        words_to_strip = ["search", "oblivian", "for", "on", "google", "chrome", "user:" , "oblivi", ":" ]
        search_query = prompt.lower()
        for word in words_to_strip:
            search_query = search_query.replace(word, "").strip()

        search_url = f"https://www.youtube.com/watch?v=dQw4w9WgXcQ"
        chrome_path = r"C:\Program Files\Google\Chrome\Application\chrome.exe"  # Replace with the actual path to your Google Chrome executable
        subprocess.run([chrome_path, search_url])

        return f"Searching for '{search_query}' on Google Chrome..."

    if "who created you" in prompt.lower():
            words_to_strip = ["search", "oblivian", "for", "on", "google", "chrome", "user:", "oblivi", ":"]
            search_query = prompt.lower()
            for word in words_to_strip:
                search_query = search_query.replace(word, "").strip()



            return f"Mr. Atman Singh, Mr. Ansh Kumar, Mr. Harshit Yadav created me on 6th July, 2023"

    if "school" in prompt.lower():
                words_to_strip = ["search", "oblivian", "for", "on", "google", "chrome", "user:", "oblivi", ":"]
                search_query = prompt.lower()
                for word in words_to_strip:
                    search_query = search_query.replace(word, "").strip()

                search_url = f"https://jivapublicschool.com/"
                chrome_path = r"C:\Program Files\Google\Chrome\Application\chrome.exe"  # Replace with the actual path to your Google Chrome executable
                subprocess.run([chrome_path, search_url])

                return f"Searching for '{search_query}' on Google Chrome..."

    if "commitment" in prompt.lower():
                words_to_strip = ["search", "oblivian", "for", "on", "google", "chrome", "user:", "oblivi", ":"]
                search_query = prompt.lower()
                for word in words_to_strip:
                    search_query = search_query.replace(word, "").strip()

                search_url = f"https://www.youtube.com/watch?v=-4kzViuTFCc"
                chrome_path = r"C:\Program Files\Google\Chrome\Application\chrome.exe"  # Replace with the actual path to your Google Chrome executable
                subprocess.run([chrome_path, search_url])

                return f"Searching for '{search_query}' on Google Chrome..."



            # Generate response using OpenAI API
    completions = openai.ChatCompletion.create(
        model="gpt-3.5-turbo",
        messages=[
            {"role": "system", "content": "You are an AI assistant designed to assist users. You will provide helpful and informative responses."},
            {"role": "user", "content": prompt},
        ],
        max_tokens=1000,
        n=1,
        stop=None,
        temperature=0.7,
    )

    message = completions.choices[0].message["content"].strip()
    return message


def recognize_speech_from_mic(recognizer, microphone):
    with microphone as source:
        print("Adjust your mic...")
        recognizer.adjust_for_ambient_noise(source)
        print("Listening...")
        audio = recognizer.listen(source)

    try:
        print("Recognizing your speech...")
        return recognizer.recognize_google(audio)
    except sr.UnknownValueError:
        print("Speech Recognition could not understand audio")
    except sr.RequestError as e:
        print(f"Could not request results from Google Speech Recognition service; {e}")

def online_tts(text, lang="en-au", speed=1.0):
    output_folder = os.path.expanduser("~/OutputFolder")
    os.makedirs(output_folder, exist_ok=True)

    with NamedTemporaryFile(delete=False) as output_file:
        tts = gtts.gTTS(text, lang=lang, slow=False)
        tts.save(output_file.name)
        output_file.seek(0)

    pygame.init()
    pygame.mixer.init()

    # Load the sound file into a Sound object
    sound = pygame.mixer.Sound(output_file.name)

    # Set the playback speed
    sound.set_volume(1.0 / speed)

    # Play the sound with speed adjustment
    channel = sound.play()
    if channel is not None:
        channel.set_endevent(pygame.USEREVENT)
        is_playing = True
        while is_playing:
            for event in pygame.event.get():
                if event.type == pygame.USEREVENT:
                    is_playing = False
                    break
            pygame.time.Clock().tick(10)

    # Unload the music file and give the system a moment to release the file
    pygame.mixer.quit()
    pygame.time.wait(500)

    # Delete the temporary file manually
    os.remove(output_file.name)

def main():
    recognizer = sr.Recognizer()
    microphone = sr.Microphone()

    print("Welcome, I am Oblivian.")
    history = []
    wake_word = "oblivian"

    while True:
        user_input = recognize_speech_from_mic(recognizer, microphone)
        if user_input is None:
            continue

        print(f"You: {user_input}")
        history.append(f"User: {user_input}")

        if wake_word.lower() in user_input.lower():
            print("Wake word detected!")
            history = []
            continue

        if user_input.lower() in ["quit", "exit", "bye"]:
            break

        prompt = "\n".join(history) + "\nOblivian:"
        response = generate_response(prompt)
        history.append(f"Oblivian: {response}")

        print(f"Oblivian: {response}")

        # Convert response to speech
        online_tts(response)

if __name__ == "__main__":
    main()
